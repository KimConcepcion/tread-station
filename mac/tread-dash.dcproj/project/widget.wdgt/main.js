/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

var prefKey = "treadstation-ip";
var treadmill = null;

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
    treadmill = new Treadmill();
    treadmill.connect("127.0.0.1");
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey(prefKey));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    document.getElementById("deviceNode").value = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey(prefKey));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


Treadmill.prototype.onSpeedChanged = function(value) 
{
    $("#SpeedIndicator").text(value.toFixed(1));
    document.getElementById("SpeedGauge").object.setValue(value);
    
}

Treadmill.prototype.onInclineChanged = function(value)
{
    $("#InclineIndicator").text(Math.round(value));
}

Treadmill.prototype.onUpdateRunningTime = function(seconds, minutes, hours)
{
    $("#RunningSeconds").text( zeropad(seconds) );
    $("#RunningMinutes").text( zeropad(minutes) );
    if(hours>0)	// more than an hour
    {
        $("#RunningHours").text( hours );
    } else {
        $("#RunningHours").text( "" );
    }
}

function SetFavSpeed(event)
{
    treadmill.setSpeed($(event.target).text());
}

function stopNow(event)
{
    treadmill.stop();
}


function decreaseSpeed(event)
{
    treadmill.decreaseSpeed();
}


function increaseSpeed(event)
{
    treadmill.increaseSpeed();
}


function decline(event)
{
    treadmill.inclineDown();
}


function incline(event)
{
    treadmill.inclineUp();
}


function inclineFloor(event)
{
    treadmill.floor();
}


function setDeviceNode(event)
{
    widget.setPreferenceForKey(document.getElementById("deviceNode").value, dashcode.createInstancePreferenceKey(prefKey));
}
